title: "LightnCandy: Deep Dive Partials"
lcresult:
  Static Partial:
    note: "LightnCandy will compile partials as included content by default for better performance."
    code: |
      require_once('./vendor/autoload.php');
      use LightnCandy\LightnCandy;

      $template = "\ncode for {{>foo}} just like\ncode for {{{bar}}}";

      $phpStr = LightnCandy::compile($template, array(
          'partials' => array(
              'foo' => '{{{bar}}}'
          )
      ));

      echo $phpStr;
  Runtime Partial:
    note: "With <code>FLAG_RUNTIMEPARTIAL</code> option, partials will be compiled as functions which can handle context change."
    code: |
      require_once('./vendor/autoload.php');
      use LightnCandy\LightnCandy;

      $template = "\ncode for {{>foo}} is different to\ncode for {{{bar}}}";

      $phpStr = LightnCandy::compile($template, array(
          'flags' => LightnCandy::FLAG_RUNTIMEPARTIAL,
          'partials' => array(
              'foo' => '{{{bar}}}'
          )
      ));

      echo $phpStr;
  Partial Usage:
    note: "Only used partials will be compiled into render function by default."
    code: |
      require_once('./vendor/autoload.php');
      use LightnCandy\LightnCandy;

      $template = "{{>foo}}, {{>bar}}";

      $phpStr = LightnCandy::compile($template, array(
          'flags' => LightnCandy::FLAG_RUNTIMEPARTIAL,
          'partials' => array(
              'foo' => '{{{foo}}}',
              'bar' => '{{{bar}}}',
              'moo' => '{{{moo}}} not used',
              'qoo' => '{{{qoo}}} not in render function',
          )
      ));

      echo $phpStr;
  Dynamic Partial:
    note: "When you using dynamic partial in template, all provided partials will be compiled into render function."
    code: |
      require_once('./vendor/autoload.php');
      use LightnCandy\LightnCandy;

      $template = "{{>foo}}, {{>(bar)}}";

      $phpStr = LightnCandy::compile($template, array(
          'flags' => LightnCandy::FLAG_ADVARNAME | LightnCandy::FLAG_RUNTIMEPARTIAL,
          'helpers' => array(
              'bar' => function () {
                  return 'bar';
              }
          ),
          'partials' => array(
              'foo' => '{{{foo}}}',
              'bar' => '{{{bar}}}',
              'moo' => '{{{moo}}} not used',
              'qoo' => '{{{qoo}}} in render function',
          )
      ));

      echo $phpStr;
  Compile Without Partials:
    note: "With <code>FLAG_ERROR_SKIPPARTIAL</code> option it will not error when you compile without partials. This can reduce the size of render function."
    code: |
      require_once('./vendor/autoload.php');
      use LightnCandy\LightnCandy;

      $template = "{{>foo}}, {{>(bar)}}";

      $phpStr = LightnCandy::compile($template, array(
          'flags' => LightnCandy::FLAG_ADVARNAME | LightnCandy::FLAG_RUNTIMEPARTIAL | LightnCandy::FLAG_ERROR_SKIPPARTIAL,
          'helpers' => array(
              'bar' => function () {
                  return 'bar';
              }
          )
      ));

      // Warning: This code will cause 'partial not found' error when you execute it without providing required partials.
      echo $phpStr;
  Runtime Partials:
    note: "You can provide more precompiled partials to render functions."
    code: |
      require_once('./vendor/autoload.php');
      use LightnCandy\LightnCandy;

      $template = "{{>foo}}, {{>(bar)}}";

      $phpStr = LightnCandy::compile($template, array(
          'flags' => LightnCandy::FLAG_ADVARNAME | LightnCandy::FLAG_RUNTIMEPARTIAL | LightnCandy::FLAG_ERROR_SKIPPARTIAL,
          'helpers' => array(
              'bar' => function () {
                  return 'bar';
              }
          )
      ));
      $renderer = LightnCandy::prepare($phpStr);

      // It will be better to precompile partials and store them into files,
      // prevent to use LightnCandy::prepare() in production environment.
      $partials = array(
          'foo' => LightnCandy::prepare('return ' . LightnCandy::compilePartial('Hello')),
          'bar' => LightnCandy::prepare('return ' . LightnCandy::compilePartial('World')),
      );

      echo $renderer(null, array(
          'partials' => $partials
      ));
ref:
  - 0028-dynamicpartial
  - LC-FLAG_ADVARNAME
  - LC-FLAG_ERROR_SKIPPARTIAL
  - LC-FLAG_RUNTIMEPARTIAL
